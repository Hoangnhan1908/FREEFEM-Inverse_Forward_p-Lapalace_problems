/* Solving equation 
 Possion equation: -(u_xx + u_yy) = f.
 Boundary: Dirichlet boundary conditions.
 Methods: Non-linear Conjugate Gradient. 
 Domain: Omega = [0,1]x[0,1].
 The exact solution: uex = (1.0/(pi)^2)*sin(pi*x)*sin(pi*y).
 */  
/* Define Data */
real L2error, Juerror;
real p = 2.0;
int n = 200; // mesh discretization
/* Define RHS and the Exact solution*/
mesh Th = square(n, n); // [0,1]^2
func uex = 1.0/pi/pi*sin(pi*x)*sin(pi*y); // It has to satisfy boundary cond.
real ubc = 0.0; // Dirichlet value
func f = 2*sin(pi*x)*sin(pi*y); //RHS
real Juexact = -1.0/(4*(pi)^2);
/*Finite Element Space*/
fespace Vh(Th, P1);
Vh u, v, varphi, u0, w;
/* J(u) = 1/2 \int_\Omega |\nabla u|^2 - \int_\Omega f*u */
func real J (real[int] & ucoeff)
{
    Vh uloc;
    uloc[] = ucoeff;
    real k = int2d(Th)(0.5*(dx(uloc)*dx(uloc) + dy(uloc)*dy(uloc))) - int2d(Th)(f*uloc);
    return k;
}
/* Gradient J^R(u) */ 
func real[int] dJR(real[int] & ucoeff)
{
    Vh uloc;
    uloc[] = ucoeff;
    varf F(uh, varphi) = int2d(Th)(dx(uloc)*dx(varphi) + dy(uloc)*dy(varphi)) - int2d(Th)(f*varphi) 
    + on(1, uh = 0) + on(2, uh = 0)
    + on(3, uh = 0) + on(4, uh = 0);
    real[int] r = F(0,Vh);
    return r;
}
/* Define the function Htilde of JR */
varf HtildeJR(w,v) = int2d(Th)( (dx(u0)^2 + dy(u0)^2)^((p-2)/2) *
                               (dx(w)*dx(v) + dy(w)*dy(v) ) )
  + on(1,w=0);
/* Compute the corresponding matrix */
matrix H = HtildeJR(Vh, Vh, solver=Cholesky,factorize=1);
func real[int] Precond(real[int] & vec)
{
    real[int] r = H^(-1)*vec;
    return r;
}
/* Solve Poisson Problem*/
solve Poisson(u0,v) = int2d(Th)(dx(u0)*dx(v)+dy(u0)*dy(v))
- int2d(Th)(f*v)
+ on(1, u0 = ubc) + on(2, u0 = ubc)
+ on(3, u0 = ubc) + on(4, u0 = ubc);
/* Solving by Non-linear Conjugate Gradient*/
// Without the preconditioner
u = sin(x)*cos(y) + ubc;
cout << "\n WITHOUT PRECONDITIONER\n" << endl;
NLCG(dJR, u[], nbiter = 150, eps = -1e-8);
real L2 = int2d(Th)((u-uex)*(u-uex));
L2error = sqrt(L2);
Juerror = abs(J(u[]) - Juexact);
cout << "\n L^2 error: " << L2error << "\n" << endl;
cout << "\n Ju error: " << Juerror << "\n" << endl;
// With the preconditioner
u = u0;
cout << "\n WITH PRECONDITIONER\n" << endl;
NLCG(dJR, precon = Precond, u[], nbiter = 150, eps = -1e-8);
/* Compute the error */
real L21 = int2d(Th)((u-uex)*(u-uex));
real L21error = sqrt(L2);
real Juerror1 = abs(J(u[]) - Juexact);
cout << "\n L^2 error: " << L21error << "\n" << endl;
cout << "\n Ju error: " << Juerror1 << "\n" << endl;
plot(u);