// solve p-Laplace problem starting from p0 = 2
//We set the boundary condition corresponding to p0 = 2
// for solving Poisson equation.
// Solve Poisson for p0 = 2;
// p0 = 2.0;
if (p == 2.0) exit;
p00 = p0;
p0 = min(p0*fact, p);
u0 = uPoisson;
u = u0;
count = 1;
while (p0 <= p)
{

  func real[int] dJR(real[int] & ucoeff) // gradient of J_R for p0
  {
    Vh uloc;
    uloc[] = ucoeff;
    varf F(uh, varphi) = int2d(Th)((dx(uloc)*dx(uloc)+dy(uloc)*dy(uloc))^((p0-2)/2)*(dx(uloc)*dx(varphi)+dy(uloc)*dy(varphi)))
      - int2d(Th)(f*varphi)
      + on(1,2,3,4, uh = 0);
    real[int] r = F(0,Vh);
    return r;
  }
  ubc = (x^2 + y^2)^((p0 - 2)/(2*p0 - 2)); // set target b.c. to initial guess
  u = lambda*u + (1 - lambda)*ubc;
  // Define the function Htilde of JR for p0
  varf HtildeJR(w,v) = int2d(Th)((dx(u)*dx(u) + dy(u)*dy(u))^((p0-2)/2) *
                                 (dx(w)*dx(v) + dy(w)*dy(v)))
    + on(1,2,3,4, w=0);
  // Compute the corresponding matrix
  matrix H = HtildeJR(Vh, Vh, solver = Cholesky, factorize = 1);
  func real[int] Precond(real[int] & vec)
  {
    real[int] r = H^(-1)*vec;
    return r;
  }
  cout << "**********************************" << endl;
  cout << "*** Trying to solve with p0 = " << p0 << endl;
  cout << "**********************************" << endl;
  int conv = NLCG(dJR, precon = Precond, u[], nbiter = numbiter, eps = -NLCGtol);
  if(conv != 1)//The non-convergence case
    {
      cout << "***************************************" << endl;
      cout << " NON-CONVERGENCE: going back to p0 = " << p00 << endl;
      cout << "***************************************" << endl;
      p0 = p00; // Restore the previous value of p0
      u = u0;
      rho = rho + 1.0;
      fact = 0.5/rho + 1.0; // fact > 1 always.
    }
  else //The convergence case
    {
      if(p0 == p) break; //(Satisfied the condition in while-loop)
      p00 = p0; // Update the last p00
      u0 = u; // Update the last u0
    }
  count = count + 1;
  p0 = min(p0*fact, p); // Updating p0
 }
