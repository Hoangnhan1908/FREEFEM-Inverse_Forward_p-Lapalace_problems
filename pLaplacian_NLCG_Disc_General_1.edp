/*Solving equation
p-Laplace equation: -div(|nabla u|^(p-2)*nabla u) = f.
Boundary: Dirichlet boundary conditions.
Methods: Non-linear Conjugate Gradient.
Domain: Omega = B(0,1).
The exact solution: uex =  ((p-1)/p)*((0.5)^(1/(p-1)))*(1 - (x^2 + y^2)^(p/(2*p-2))) [Example 1: CZ17].
*/
/*Define Data*/
real L2error;
real p0, p, p00, rho;
p = 1000.0;
int n = 50; //Nhan: n => 30. If n < 30, It will be failed at p = 875
rho = 1.0;
real fact = 0.5/rho + 1.0;
/*Define RHS and the Exact solution*/
real R = 1.0;
border C(t=0, 2*pi){x = R*cos(t); y = R*sin(t); label = 1;}
mesh Th = buildmesh(C(n)); //B(0,1)
func uex = ((p-1)/p)*((0.5)^(1/(p-1)))*(1 - (x^2 + y^2)^(p/(2*p-2)));
func ubc = uex;
func f = 1.0;
func lambda = 1.0;
real u1 = 0.0;
func Juexact = pi*((0.5)^(1/(p-1)))*((p-1)^2)/(p*(2-3*p)); 
// Finite Element Space
fespace Vh(Th, P1);
Vh u0, u, v, varphi, w;
//We set the boundary condition corresponding to p0 = 2 for solving Poisson equation.
p0 = 2.0;
p00 = p0;
p0 = min(p0*fact, p);
//Solve Poisson for p0 = 2;
solve Poisson(u, v) = int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))
- int2d(Th)(f*v)
+ on(1, u = u1);
if(p0 == 2) exit;
u0 = u;
while (p0 <= p)
{
    func real[int] dJR(real[int] & ucoeff)
    {
        Vh uloc;
        uloc[] = ucoeff;
        varf F(uh, varphi) = int2d(Th)((dx(uloc)*dx(uloc)+dy(uloc)*dy(uloc))^((p0-2)/2)*(dx(uloc)*dx(varphi)+dy(uloc)*dy(varphi)))
        - int2d(Th)(f*varphi)
        + on(1, uh = 0);
        real[int] r = F(0,Vh);
        return r;
    }
    // Define the function Htilde of JR
    varf HtildeJR(w,v) = int2d(Th)((dx(u)*dx(u) + dy(u)*dy(u))^((p0-2)/2) *
                                (dx(w)*dx(v) + dy(w)*dy(v)))
    + on(1, w=0);
    // Compute the corresponding matrix
    matrix H = HtildeJR(Vh, Vh, solver = Cholesky, factorize = 1);
    func real[int] Precond(real[int] & vec)
    {
        real[int] r = H^(-1)*vec;
        return r;
    }
    cout << "*** Trying to solve with p0 = " << p0 << endl;
    int conv = NLCG(dJR, precon = Precond, u[], nbiter = 10, eps = -1e-8);
    if(conv != 1)//The non-convergence case
    {
        p0 = p00; // Restore the previous value of p0
        u = u0;
        rho = rho + 1.0;
        fact = 0.5/rho + 1.0; // fact > 1 always.
        cout << "***** The value of p0 = " << p0 << endl;
        cout << "***** The value of p00 = " << p00 << endl;
    }
    else //The convergence case
    {   
        if(p0 == p) break; //(Satisfied the condition in while-loop)
        p00 = p0; // Update the last p00
        u0 = u; // Update the last u0
        p0 = min(p0*fact, p); // increase p0 and compute with it.
    }
    u = lambda*u0 + (1 - lambda)*ubc;
} 
L2error = int2d(Th)((u - uex)*(u - uex));
cout << "********* L2 error for p = " << p0 << " is " << sqrt(L2error) << "." << endl;
plot(u);