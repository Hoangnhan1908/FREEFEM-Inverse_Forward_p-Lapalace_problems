/*Solving equation
p-Laplace equation: -div(|nabla u|^(p-2)*nabla u) = f.
Boundary: Dirichlet boundary conditions.
Methods: Non-linear Conjugate Gradient.
Domain: Omega = B(0,1).
The exact solution: uex =  ((p-1)/p)*((0.5)^(1/(p-1)))*(1 - (x^2 + y^2)^(p/(2*p-2))) [Example 1: CZ17].
*/
/*Define Data*/
real L2error, Juerror;
real p = 3.0;
real p1 = 2.0; //Power p of the exact solution of the Possion equation.
int n = 50; // mesh discretization
/*Define RHS and the Exact solution*/
real R = 1.0;
border C(t=0, 2*pi){x = R*cos(t); y = R*sin(t); label = 1;}
mesh Th = buildmesh(C(n)); //B(0,1)
func uex = ((p-1)/p)*((0.5)^(1/(p-1)))*(1 - (x^2 + y^2)^(p/(2*p-2)));
func f = 1.0;
real ubc = 0.0;
func Juexact = pi*((0.5)^(1/(p-1)))*((p-1)^2)/(p*(2-3*p)); 
/*Finite Element Space*/
fespace Vh(Th, P1);
Vh u, v, varphi, u0, w;
/*Define of J(u) */
func real J(real[int] & ucoeff)
{
  Vh uloc;
  uloc[] = ucoeff;
  real k = int2d(Th)(( dx(uloc)*dx(uloc) + dy(uloc)*dy(uloc))^(p/2)/p) - int2d(Th)(f*uloc);
  return k;
}
/* Gradient J^R(u) */
func real[int] dJR(real[int] & ucoeff) 
{
  Vh uloc;
  uloc[] = ucoeff;
  varf F(uh,varphi) = int2d(Th)((dx(uloc)*dx(uloc)+dy(uloc)*dy(uloc))^((p-2)/2)*
                                 (dx(uloc)*dx(varphi)+dy(uloc)*dy(varphi))-f*varphi)
    + on(1, uh=0); 
  real[int] r = F(0,Vh);
  return r;
}
/*Solve Poisson Problem*/
solve Poisson(u0,v) = int2d(Th)((dx(u0)*dx(v)+dy(u0)*dy(v)))
- int2d(Th)(f*v)
+ on(1, u0 = ubc);
/*Define the function Htilde of JR*/
varf HtildeJR(w,v) = int2d(Th)( (dx(u0)*dx(u0) + dy(u0)*dy(u0))^((p-2)/2) *
                               (dx(w)*dx(v) + dy(w)*dy(v)))
  + on(1,w=0);
/*Compute the corresponding matrix*/
matrix H = HtildeJR(Vh,Vh,solver=Cholesky,factorize=1);
func real[int] Precond(real[int] & vec)
{
  real[int] r = H^(-1)*vec;
  return r;
}

/* Solving by Non-linear Conjugate Gradient*/
// Without the preconditioner
u = ((2.0-1)/p)*((0.5)^(1/(2.0-1)))*(1 - (x^2 + y^2)^(p1/(2*p1-2))); //The exact solution of Poisson Equation.
cout << "\n WITHOUT PRECONDITIONER\n" << endl;
NLCG(dJR, u[], nbiter = 150, eps = -1e-8);
real L2 = int2d(Th)((u-uex)*(u-uex));
L2error = sqrt(L2);
Juerror = abs(J(u[]) - Juexact);
cout << "\n L^2 error: " << L2error << "\n" << endl;
cout << "\n Ju error: " << Juerror << "\n" << endl;
// With the preconditioner
u = ((2.0-1)/p)*((0.5)^(1/(2.0-1)))*(1 - (x^2 + y^2)^(p1/(2*p1-2)));//The exact solution of Poisson Equation.
cout << "\n WITH PRECONDITIONER\n" << endl;
NLCG(dJR, precon = Precond, u[], nbiter = 150, eps = -1e-8);
/* Compute the error */
real L21 = int2d(Th)((u-uex)*(u-uex));
real L21error = sqrt(L21);
real Juerror1 = abs(J(u[]) - Juexact);
cout << "\n L^2 error: " << L21error << "\n" << endl;
cout << "\n Ju error: " << Juerror1 << "\n" << endl;
plot(u);